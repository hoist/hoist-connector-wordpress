{"version":3,"sources":["connector.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAGA;;;;;;;;AAIA,IAAI,YAAY;AACd,YAAU,kCAAV;AACA,mBAAiB,eAAjB;AACA,qBAAmB,mBAAnB;CAHE;AAKJ,IAAI,aAAa,4CAAb;;;;;;IAKiB;;;;;;;;;;;;AAWnB,WAXmB,kBAWnB,CAAY,aAAZ,EAA2B;0BAXR,oBAWQ;;uEAXR,+BAYX,mBAAM,EAAN,EAAU,aAAV,EAAyB,SAAzB,IADmB;;AAEzB,UAAK,SAAL,GAAiB,cAAc,QAAd,CAFQ;AAGzB,UAAK,cAAL,GAAsB,aAAtB,CAHyB;;GAA3B;;;;;;;;;eAXmB;;qCAsBF,eAAe;AAC5B,aAAO,2BAvBQ,oEAuBe,cAAvB,CAAsC,IAAtC,CAA2C,UAAC,MAAD,EAAY;AAC5D,eAAO,aAAP,GAAuB,MAAvB,CAD4D;AAE5D,eAAO,KAAP,GAAe,QAAf,CAF4D;AAG5D,eAAO,MAAP,CAH4D;OAAZ,CAAlD,CAD4B;;;;;;kCAQlB,eAAe;AAC3B,aAAO,2BA/BU,oEA+Ba,cAAvB,CAAsC,IAAtC,CAA2C,UAAC,MAAD,EAAY;AAC5D,eAAO,UAAU,EAAV,CADqD;OAAZ,CAA3C,CAEJ,IAFI,CAEC,UAAC,MAAD,EAAY;AAClB,eAAO,UAAP,GAAoB,oBAApB,CADkB;AAElB,eAAO,MAAP,CAFkB;OAAZ,CAFR,CAD2B;;;;wBAYzB,MAAM;AACR,UAAI,WAAS,aAAa,IAAtB,CADI;AAER,aAAO,KAAK,eAAL,CAAqB,KAArB,EAA4B,GAA5B,EAAiC,IAAjC,CAAsC,UAAC,MAAD,EAAY;AACvD,eAAO,KAAK,KAAL,CAAW,MAAX,CAAP,CADuD;OAAZ,CAA7C,CAFQ;;;;yBAML,MAAM,MAAM;AACf,UAAI,WAAS,aAAa,IAAtB,CADW;AAEf,aAAO,KAAK,eAAL,CAAqB,MAArB,EAA6B,GAA7B,EAAkC,IAAlC,EAAwC,IAAxC,CAA6C,UAAC,MAAD,EAAY;AAC9D,eAAO,KAAK,KAAL,CAAW,MAAX,CAAP,CAD8D;OAAZ,CAApD,CAFe;;;;wBAMb,MAAM,MAAM;AACd,UAAI,WAAS,aAAa,IAAtB,CADU;AAEd,aAAO,KAAK,eAAL,CAAqB,KAArB,EAA4B,GAA5B,EAAiC,IAAjC,EAAuC,IAAvC,CAA4C,UAAC,MAAD,EAAY;AAC7D,eAAO,KAAK,KAAL,CAAW,MAAX,CAAP,CAD6D;OAAZ,CAAnD,CAFc;;;;0BAMV,MAAM,MAAM;AAChB,UAAI,WAAS,aAAa,IAAtB,CADY;AAEhB,aAAO,KAAK,eAAL,CAAqB,OAArB,EAA8B,GAA9B,EAAmC,IAAnC,EAAyC,IAAzC,CAA8C,UAAC,MAAD,EAAY;AAC/D,eAAO,KAAK,KAAL,CAAW,MAAX,CAAP,CAD+D;OAAZ,CAArD,CAFgB;;;;4BAMX,MAAM;AACX,UAAI,WAAS,aAAa,IAAtB,CADO;AAEX,aAAO,KAAK,eAAL,CAAqB,QAArB,EAA+B,GAA/B,EAAoC,IAApC,CAAyC,UAAC,MAAD,EAAY;AAC1D,eAAO,KAAK,KAAL,CAAW,OAAO,CAAP,CAAX,CAAP,CAD0D;OAAZ,CAAhD,CAFW;;;;sCA5BY;AACvB,aAAO,QAAQ,OAAR,CAAgB,EAAhB,CAAP,CADuB;;;;SAtCN","file":"connector.js","sourcesContent":["import {\n  OAuth2ConnectorBase\n} from '@hoist/oauth-connector';\nimport {\n  merge\n} from 'lodash';\n\nlet overrides = {\n  baseSite: 'https://public-api.wordpress.com',\n  accessTokenPath: '/oauth2/token',\n  authorizationPath: '/oauth2/authorize'\n};\nlet apiBaseUri = 'https://public-api.wordpress.com/rest/v1.1'\n  /**\n   * A Hoist Connector for connecting to GitLab\n   * @extends {OAuth2ConnectorBase}\n   */\nexport default class WordpressConnector extends OAuth2ConnectorBase {\n\n  /**import {\n  merge\n} from 'lodash';\n\n   * create a new connector\n   * @param {object} configuration - the configuration properties to use\n   * @param {string} configuration.clientId - the OAuth2 client id\n   * @param {string} configuration.clientSecret - the OAuth2 client secret\n   */\n  constructor(configuration) {\n    super(merge({}, configuration, overrides));\n    this._clientId = configuration.clientId;\n    this._configuration = configuration;\n  }\n\n  /**\n   * @private\n   * @param AuthorizationStore authorization the users authorisation store\n   * @returns Promise<object> an object containing key value pairs to send with the client to the authorization url\n   */\n  _authorizeParams(authorization) {\n      return super._authorizeParams(authorization).then((params) => {\n        params.response_type = \"code\";\n        params.scope = 'global';\n        return params;\n      });\n    }\n    //use authorization params as it has redirect uri\n  _accessParams(authorization) {\n    return super._authorizeParams(authorization).then((params) => {\n      return params || {};\n    }).then((params) => {\n      params.grant_type = \"authorization_code\"\n      return params;\n    });\n  }\n  static defaultSettings() {\n    return Promise.resolve({});\n  }\n\n  get(path) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('GET', uri).then((result) => {\n      return JSON.parse(result);\n    });\n  }\n  post(path, body) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('POST', uri, body).then((result) => {\n      return JSON.parse(result);\n    });\n  }\n  put(path, body) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('PUT', uri, body).then((result) => {\n      return JSON.parse(result);\n    });\n  }\n  patch(path, body) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('PATCH', uri, body).then((result) => {\n      return JSON.parse(result);\n    });\n  }\n  delete(path) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('DELETE', uri).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n}\n\n/**\n * @external {OAuth2ConnectorBase} https://doc.esdoc.org/github.com/hoist/oauth-connector/class/src/oauth2_connector.js~OAuth2ConnectorBase.html\n */\n"],"sourceRoot":"/source/"}